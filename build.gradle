/*
 * dataZ - Test Support For Data Stores.
 *
 * Copyright 2014-2020 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * https://www.eclipse.org/legal/epl-v20.html
 */

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '5.6.4'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    // dataZVersion see gradle.properties
    version = dataZVersion
    group = 'org.failearly.dataz'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    dependencies {
        implementation("junit:junit:$junitVersion") {
            exclude group: 'org.hamcrest', module: 'org.hamcrest'
        }
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
        testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"

        testCompile "org.spockframework:spock-core:$spockVersion"
        testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

        testCompile( "com.athaydes:spock-reports:$spockReportVersion" ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    javadoc.configure {
        failOnError = false

        exclude '**/internal/**'


        options {
            memberLevel = JavadocMemberLevel.PROTECTED
            title = "${project.name.capitalize()} API - Version ${project.version}"
            windowTitle = title
            linkSource = true
            // TODO : Update stylesheet
            // stylesheetFile = "${rootDir}/doc/css/stylesheet.css" as File
            footer = 'Copyright (C) 2014-2020 <a href="http://fail-early.com">Fail Early</a>. All rights reserved.'
        }
    }

    task sourcesJar(type: Jar, dependsOn:[classes, test]) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:[javadoc, test]) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    jar.configure {
        dependsOn test
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
